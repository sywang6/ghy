       当前线程
|----------------------|
|    当前栈帧            |
|----------------------|
|   局部变量表           |
|   操作栈              |
|   动态连接            |
|   返回地址            |
|   ... ...            |
|----------------------|
|    栈帧n			   |
|----------------------|
|    栈帧2    		   |
|----------------------|
|     栈帧1 		       |
|----------------------|

局部变量表:
    .最大容量,在编译器确定,code的max_local属性
    .局部变量表的容量以变量槽为最小单位.每个变量槽都应该能存放一个boolean,byte,char,short,int,float,reference或returnAddress(以不太常用,
      它是为字节码指令jsr,jsr_w和ret服务的,某些古老的java虚拟机曾经使用这几个指令来实现异常处理时的跳转,现在全部改为异常表来替代)
    .局部变量表的变量槽可以复用,但是这可能影响垃圾回收
    .局部变量必须初始化,否则不会通过编译

操作数栈:
    .后入先出的栈,最大深度也在编译的时候被写入到Code的max_stacks属性
    .32位数据类型所占的容量为2位,64位数据类型所占的栈容量为2
    .局部变量表与操作数栈的部分区域共享
							|------------------|
							|操作栈            |
							|其他栈帧信息      |
							|局部变量表        |
|--------------|------------|------------------|
|操作栈共享区域   |重叠区域	|局部变量表共享区域|
|--------------|------------|------------------|
|操作栈        |
|其他栈帧信息  |
|局部变量表    |
|--------------|

动态连接:
    每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用.

方法返回地址:

附加信息:
    动态连接,方法返回地址,附加信息合在一起一般称做栈帧信息
